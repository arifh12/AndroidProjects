//====================================================================
//
// Application: Air Dash
// Activity:    ActMain
// Course:      CSC 4330
// Homework:    03
// Author:      Arif Hasan
// Date:        03/14/2021
// Description:
//   This activity gets the user's simulation inputs from the app
// and sets the outputs according to the updates from the Task class.
// The onClick methods for start, stop, recall, and reset are
// also handled.
//
//====================================================================

package edu.wayne.airdash;

// Imports automatically generated by intelliJ
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.SeekBar;
import android.widget.Toast;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
import java.util.Timer;

//----------------------------------------------------------------
// class ActMain
//----------------------------------------------------------------
public class ActMain extends AppCompatActivity implements SeekBar.OnSeekBarChangeListener {

    //----------------------------------------------------------------
    // Constants and variables
    //----------------------------------------------------------------
    static EditText etClock, etOrdersQd, etOrdersDlv, etDronesAvl, etDronesCrashed;
    EditText etOrderRate, etDronesFlying, etDlvTime;
    SeekBar sbOrderRate, sbDlvTime;
    static SeekBar sbDronesFlying;
    Button btnStart, btnStop, btnRecall, btnReset;
    Timer timer;
    static final Shared data = Shared.DATA;

    //----------------------------------------------------------------
    // onCreate
    //----------------------------------------------------------------
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.laymain);

        // Initializing variables and listeners
        etClock = findViewById(R.id.edtTxtClock);
        etOrdersQd = findViewById(R.id.edtTxtOrdersQd);
        etOrdersDlv = findViewById(R.id.edtTxtOrdersDlv);
        etDronesAvl = findViewById(R.id.edtTxtDronesAvl);
        etDronesCrashed = findViewById(R.id.edtTxtDronesCrashed);
        etOrderRate = findViewById(R.id.edtTxtOrderRate);
        etDronesFlying = findViewById(R.id.edtTxtDronesFlying);
        etDlvTime = findViewById(R.id.edtTxtDeliveryTime);

        sbOrderRate = findViewById(R.id.seekBarOrderRate);
        sbDronesFlying = findViewById(R.id.seekBarDronesFlying);
        sbDlvTime = findViewById(R.id.seekBarDlvTime);

        btnStart = findViewById(R.id.btnStart);
        btnStop = findViewById(R.id.btnStop);
        btnRecall = findViewById(R.id.btnRecall);
        btnReset = findViewById(R.id.btnReset);

        sbOrderRate.setOnSeekBarChangeListener(this);
        sbDronesFlying.setOnSeekBarChangeListener(this);
        sbDlvTime.setOnSeekBarChangeListener(this);
    }

    //----------------------------------------------------------------
    // onProgressChanged: Displaying and saving seek bar inputs
    //----------------------------------------------------------------
    @Override
    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
        if (seekBar.equals(sbOrderRate)) {
            etOrderRate.setText(i+"");
            data.orderRate = Integer.parseInt(etOrderRate.getText().toString());
        } else if (seekBar.equals(sbDronesFlying)) {
            etDronesFlying.setText(i+"");
            data.dronesFlying = Integer.parseInt(etDronesFlying.getText().toString());
        } else if (seekBar.equals(sbDlvTime)) {
            etDlvTime.setText(i+"");
            data.dlvTime = Integer.parseInt(etDlvTime.getText().toString());
        }
    }

    //----------------------------------------------------------------
    // Auto-generated/unused abstract methods
    //----------------------------------------------------------------
    @Override
    public void onStartTrackingTouch(SeekBar seekBar) {}
    @Override
    public void onStopTrackingTouch(SeekBar seekBar) {}

    //----------------------------------------------------------------
    // onClickStart: When start button is click, disabling start,
    // enabling stop, starting timer, and displaying toast message.
    //----------------------------------------------------------------
    public void onClickStart(View view) {
        btnStart.setEnabled(false);
        btnStop.setEnabled(true);

        // Ensuring timer is not already running
        if (timer != null)
            timer.cancel();
        timer = new Timer();

        // Invoking the Task class every second
        timer.schedule(new Task(), data.DELAY_SECONDS * 1000, data.PERIOD_SECONDS * 1000);

        Toast.makeText(this, "Simulation has started.", Toast.LENGTH_SHORT).show();
    }

    //----------------------------------------------------------------
    // timerTaskHandler: Updating on-screen controls with data from
    // Shared singleton when invoked
    //----------------------------------------------------------------
    public static Handler timerTaskHandler = new Handler(Looper.getMainLooper()) {
        @Override
        public void handleMessage(Message msg) {
            // Adjusting number of drones flying as they crash
            sbDronesFlying.setMax(data.dronesAvl);

            etClock.setText(data.clock+"");
            etOrdersQd.setText(data.ordersQd+"");
            etOrdersDlv.setText(data.ordersDlv+"");
            etDronesAvl.setText(data.dronesAvl+"");
            etDronesCrashed.setText(data.dronesCrashed+"");
        }
    };

    //----------------------------------------------------------------
    // onClickStop: When stop button is clicked, stopping the timer,
    // saving inputs into SharedPreferences and displaying toast
    // message.
    //----------------------------------------------------------------
    public void onClickStop(View view) {
        stopTimer();
        savePreferences();

        Toast.makeText(this, "Simulation has ended.", Toast.LENGTH_SHORT).show();
    }

    //----------------------------------------------------------------
    // stopTimer: Disabling stop button, enabling start button,
    // stopping timer
    //----------------------------------------------------------------
    public void stopTimer() {
        btnStop.setEnabled(false);
        btnStart.setEnabled(true);

        if (timer != null)
            timer.cancel();
        timer = null;
    }

    //----------------------------------------------------------------
    // savePreferences: Storing inputs and outputs into
    // SharedPreferences
    //----------------------------------------------------------------
    public void savePreferences() {
        SharedPreferences sp = getSharedPreferences(data.SHARED_PREFS, MODE_PRIVATE);
        SharedPreferences.Editor editor = sp.edit();

        editor.putInt("clock", data.clock);
        editor.putInt("ordersDlv", data.ordersDlv);
        editor.putInt("ordersQd", data.ordersQd);
        editor.putInt("dronesAvl", data.dronesAvl);
        editor.putInt("dronesCrashed", data.dronesCrashed);
        editor.putInt("orderRate", data.orderRate);
        editor.putInt("dronesFlying", data.dronesFlying);
        editor.putInt("dlvTime", data.dlvTime);

        editor.apply();
    }

    //----------------------------------------------------------------
    // onClickRecall: When recall button is clicked, displaying
    // confirmation dialog box, loading preferences, and stopping
    // timer.
    //----------------------------------------------------------------
    public void onClickRecall(View view) {
        AlertDialog.Builder dialog = new AlertDialog.Builder(this)
                .setTitle("Confirm Recall")
                .setMessage("Are you sure you want to retrieve the previous simulation?")
                .setNegativeButton("No", null)
                .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        loadPreferences();
                        stopTimer();
                    }
                });

        dialog.show();
    }

    //----------------------------------------------------------------
    // loadPreferences: Retrieving data stored in SharedPreferences.
    //----------------------------------------------------------------
    public void loadPreferences() {
        SharedPreferences sp = getSharedPreferences(data.SHARED_PREFS, MODE_PRIVATE);

        data.clock = sp.getInt("clock", 0);
        data.ordersDlv = sp.getInt("ordersDlv", 0);
        data.ordersQd = sp.getInt("ordersQd", 0);
        data.dronesAvl = sp.getInt("dronesAvl", 100);
        data.dronesCrashed = sp.getInt("dronesCrashed", data.dronesCrashed);
        data.orderRate = sp.getInt("orderRate", data.orderRate);
        data.dronesFlying = sp.getInt("dronesFlying", data.dronesFlying);
        data.dlvTime = sp.getInt("dlvTime", data.dlvTime);

        sbOrderRate.setProgress(data.orderRate);
        sbDronesFlying.setProgress(data.dronesFlying);
        sbDlvTime.setProgress(data.dlvTime);

        // Invoking handler to update screen
        timerTaskHandler.sendEmptyMessage(0);
    }

    //----------------------------------------------------------------
    // onClickReset: When reset button is clicked, displaying
    // confirmation dialog box, clearing screen, and stopping timer.
    //----------------------------------------------------------------
    public void onClickReset(View view) {
        AlertDialog.Builder dialog = new AlertDialog.Builder(this)
                .setTitle("Confirm Reset")
                .setMessage("Are you sure you want to reset the current simulation?")
                .setNegativeButton("No", null)
                .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        clearScreen();
                        stopTimer();
                    }
                });

        dialog.show();
    }

    //----------------------------------------------------------------
    // clearScreen: Setting all controls back to original state
    //----------------------------------------------------------------
    private void clearScreen() {
        sbOrderRate.setProgress(0);
        sbDronesFlying.setProgress(0);
        sbDlvTime.setProgress(0);

        data.clock = 0;
        data.ordersQd = 0;
        data.ordersDlv = 0;
        data.dronesAvl = 100;
        data.dronesCrashed = 0;

        // Invoking handler to update screen
        timerTaskHandler.sendEmptyMessage(0);
    }
}