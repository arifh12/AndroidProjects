//====================================================================
//
// Application: Veritable Vittles
// Activity:    ActMain
// Course:      CSC 4330
// Homework:    04
// Author:      Arif Hasan
// Date:        04/11/2021
// Description:
//   This application allows the user to create a reservation using
// party name, number of people, seating type, and occasion.
// The wait time is displayed and updated every second; a label is
// shown when the reservation is ready.
//
//====================================================================

package edu.wayne.veritablevittles;

// Imports automatically generated by intelliJ
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.speech.tts.TextToSpeech;
import android.view.View;
import android.widget.*;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;

import java.io.*;
import java.util.*;

//----------------------------------------------------------------
// class ActMain
//----------------------------------------------------------------
public class ActMain extends AppCompatActivity implements TextToSpeech.OnInitListener {

    //----------------------------------------------------------------
    // Constants and variables
    //----------------------------------------------------------------
    Spinner spSeatingTypes;
    static EditText etName, etNumberOfPeople, etOccasion, etWaitTime;
    static TextView labelReservation;
    static Button btnSubmit, btnSpeak;
    TextToSpeech tts;
    static boolean submitStatus = true;
    static Shared data = Shared.DATA;
    static Timer timer;
    static final String SEATING_TYPES_FILE = "SeatingTypesFile.txt";

    //----------------------------------------------------------------
    // onCreate
    //----------------------------------------------------------------
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.laymain);

        // Initializing variables
        etName = findViewById(R.id.edtTxtName);
        etNumberOfPeople = findViewById(R.id.edtNumberOfPeople);
        etOccasion = findViewById(R.id.edtOccasion);
        spSeatingTypes = findViewById(R.id.spinnerSeatingType);
        btnSubmit = findViewById(R.id.btnSubmit);
        etWaitTime = findViewById(R.id.edtTxtWaitTime);
        btnSpeak = findViewById(R.id.btnSpeak);
        labelReservation = findViewById(R.id.txtViewReservation);
        tts = new TextToSpeech(this, this);

        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,
                android.R.layout.simple_spinner_item, loadSeatingTypes());
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spSeatingTypes.setAdapter(adapter);
    }

    //----------------------------------------------------------------
    // saveSeatingTypes: writing to internal storage
    //----------------------------------------------------------------
//    public void saveSeatingTypes(View view) {
//        FileOutputStream fileOut = null;
//        PrintStream printStream = null;
//
//        try {
//            fileOut = openFileOutput(SEATING_TYPES_FILE, MODE_PRIVATE);
//            printStream = new PrintStream(fileOut);
//
//            printStream.println("Interior booth");
//            printStream.println("Interior table");
//            printStream.println("Patio");
//            printStream.println("Private Room");
//            printStream.println("Rooftop");
//            printStream.println("Sidewalk");
//            printStream.println("Window table");
//
//            fileOut.close();
//            printStream.close();
//
//            Toast.makeText(this, "Writing file to '" + getFilesDir() + "/" + SEATING_TYPES_FILE + "'.",
//                    Toast.LENGTH_SHORT).show();
//
//        } catch (IOException e) {
//            Toast.makeText(this, "Error creating or writing to input file '" + SEATING_TYPES_FILE + "'.",
//                    Toast.LENGTH_SHORT).show();
//        }
//    }

    //----------------------------------------------------------------
    // onInit: initializing TextToSpeech
    //----------------------------------------------------------------
    @Override
    public void onInit(int i) {
        if (tts != null && i == TextToSpeech.SUCCESS) {
            tts.setLanguage(Locale.US);
        }
    }

    //----------------------------------------------------------------
    // loadSeatingTypes: reading from internal storage
    //----------------------------------------------------------------
    public List<String> loadSeatingTypes() {
        FileInputStream fileIn = null;
        List<String> listSeatingTypes = null;

        try {
            fileIn = openFileInput(SEATING_TYPES_FILE);
            Scanner scanner = new Scanner(fileIn);
            listSeatingTypes = new ArrayList<>();

            listSeatingTypes.add("- No Preference -");
            while (scanner.hasNextLine()) {
                listSeatingTypes.add(scanner.nextLine());
            }

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        return listSeatingTypes;
    }

    //----------------------------------------------------------------
    // onClickSubmit: handling submit/cancel action
    //----------------------------------------------------------------
    public void onClickSubmit(View view) {
        btnSpeak.setEnabled(submitStatus);
        labelReservation.setVisibility(View.INVISIBLE);
        Random random = new Random();
        int rand = random.nextInt(21) + 20;

        if (submitStatus) {
            data.time = rand;

            toggleSubmit();
            Toast.makeText(this, "Reservation was submitted!", Toast.LENGTH_SHORT).show();
            savePreferences();

            if (timer != null)
                timer.cancel();
            timer = new Timer();

            timerTaskHandler.sendEmptyMessage(0);
            timer.schedule(new Task(), 1000, 1000);
        } else {
            toggleSubmit();
            stopTimer();
            etWaitTime.setText("");
        }
    }

    //----------------------------------------------------------------
    // toggleSubmit: changing submit button state
    //----------------------------------------------------------------
    public static void toggleSubmit() {
        if (submitStatus) {
            btnSubmit.setText("Cancel");
            submitStatus = false;
        } else {
            btnSubmit.setText("Submit");
            submitStatus = true;
        }
    }

    //----------------------------------------------------------------
    // timerTaskHandler: responds to Task class
    //----------------------------------------------------------------
    public static Handler timerTaskHandler = new Handler(Looper.getMainLooper()) {
        @Override
        public void handleMessage(Message msg) {
            etWaitTime.setText(String.valueOf(data.time) + ((data.time == 1) ? " minute" : " minutes"));
            if (data.time == 0) {
                stopTimer();
                labelReservation.setVisibility(View.VISIBLE);
                toggleSubmit();
                btnSpeak.setEnabled(false);
            }
        }
    };

    //----------------------------------------------------------------
    // savePreferences
    //----------------------------------------------------------------
    public void savePreferences() {
        SharedPreferences sp = getPreferences(MODE_PRIVATE);
        SharedPreferences.Editor editor = sp.edit();

        editor.putString("name", etName.getText().toString());
        editor.putInt("people", Integer.parseInt(etNumberOfPeople.getText().toString()));
        editor.putInt("seating", spSeatingTypes.getSelectedItemPosition());
        editor.putString("occasion", etOccasion.getText().toString());

        editor.apply();
    }

    //----------------------------------------------------------------
    // stopTimer
    //----------------------------------------------------------------
    public static void stopTimer() {
        if (timer != null)
            timer.cancel();
        timer = null;
    }

    //----------------------------------------------------------------
    // onClickRecall: retrieve previous reservation, if yes
    //----------------------------------------------------------------
    public void onClickRecall(View view) {
        AlertDialog.Builder alert = new AlertDialog.Builder(this);
        alert.setTitle("Confirm Recall")
                .setMessage("Are you sure you want to retrieve the previous reservation?")
                .setNegativeButton("No", null)
                .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        SharedPreferences sp = getPreferences(MODE_PRIVATE);

                        etName.setText(sp.getString("name", ""));
                        etNumberOfPeople.setText(sp.getInt("people", 0) + "");
                        etOccasion.setText(sp.getString("occasion", ""));
                        spSeatingTypes.setSelection(sp.getInt("seating", 0));
                        etWaitTime.setText("");
                        labelReservation.setVisibility(View.INVISIBLE);

                        if (!submitStatus)
                            onClickSubmit(null);
                    }
                }).show();
    }

    //----------------------------------------------------------------
    // onClickReset: clear all inputs on screen, if yes
    //----------------------------------------------------------------
    public void onClickReset(View view) {
        AlertDialog.Builder alert = new AlertDialog.Builder(this);
        alert.setTitle("Confirm Reset")
                .setMessage("Are you sure you want to reset")
                .setNegativeButton("No", null)
                .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        etName.setText("");
                        etNumberOfPeople.setText("");
                        etOccasion.setText("");
                        spSeatingTypes.setSelection(0);
                        etWaitTime.setText("");
                        labelReservation.setVisibility(View.INVISIBLE);

                        if (!submitStatus)
                            onClickSubmit(null);
                    }
                }).show();
    }

    //----------------------------------------------------------------
    // onClickSpeak: voice synthesis using TextToSpeech
    //----------------------------------------------------------------
    public void onClickSpeak(View view) {
        tts.speak(data.message, TextToSpeech.QUEUE_FLUSH, null);
    }
}