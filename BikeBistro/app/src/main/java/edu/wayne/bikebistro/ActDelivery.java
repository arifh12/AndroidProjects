//====================================================================
//
// Application: Bike Bistro
// Activity:    ActDelivery
// Description:
//   This activity is allows the user to enter delivery information
// and displays order details based on selections from ActMeal.
//
//====================================================================

package edu.wayne.bikebistro;

// Imports automatically generated by intelliJ
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.SeekBar;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;

public class ActDelivery extends AppCompatActivity implements SeekBar.OnSeekBarChangeListener, TextWatcher {

    //----------------------------------------------------------------
    // Constants and variables
    //----------------------------------------------------------------
    EditText edtTxtName, edtTxtAddress, edtTxtPhone,
            edtTxtSubtotal, edtTxtSalesTax, edtTxtDistance,
            edtTxtDeliveryFee, edtTxtTip, edtTxtTotal, edtTxtETA = null;
    SeekBar seekBarDistance = null;

    int distance, eta;
    double deliveryFee, tip;
    String[] itemsSelected;
    double subtotal, salesTax, total;
    String name, address, phone;

    final int MINUTES_PER_MILE = 2;
    final double SALES_TAX_RATE = 0.06;
    final String MY_PREFS = "MY_PREFS";

    //----------------------------------------------------------------
    // onCreate
    //----------------------------------------------------------------
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.laydelivery);

        // Creating toolbar
        Toolbar tbrMeal = findViewById(R.id.tbrMeal);
        setSupportActionBar(tbrMeal);

        // Initializing variables
        edtTxtDistance = findViewById(R.id.edtTxtDistance);
        seekBarDistance = findViewById(R.id.seekBarDistance);
        edtTxtDeliveryFee = findViewById(R.id.edtTxtDeliveryFee);
        edtTxtTip  = findViewById(R.id.edtTxtTip);
        edtTxtETA = findViewById(R.id.edtTxtETA);
        edtTxtSubtotal = findViewById(R.id.edtTxtSubtotal);
        edtTxtTotal = findViewById(R.id.edtTxtTotal);
        edtTxtSalesTax = findViewById(R.id.edtTxtSalesTax);
        edtTxtName = findViewById(R.id.edtTxtName);
        edtTxtAddress = findViewById(R.id.edtTxtAddress);
        edtTxtPhone = findViewById(R.id.edtTxtPhone);

        edtTxtTip.addTextChangedListener(this);
        seekBarDistance.setOnSeekBarChangeListener(this);

        loadExtras();
    }

    //----------------------------------------------------------------
    // Retrieving selections and subtotal passed from ActMeal
    //----------------------------------------------------------------
    private void loadExtras() {
        itemsSelected = getIntent().getStringArrayExtra("items");
        subtotal = getIntent().getDoubleExtra("subtotal", 0.00d);
        salesTax = subtotal * SALES_TAX_RATE;

        edtTxtSubtotal.setText(String.format("$%.2f", subtotal));
        edtTxtSalesTax.setText(String.format("$%.2f", salesTax));

        updateTotal();
    }


    //----------------------------------------------------------------
    // Adding menu options to toolbar (not used)
    //----------------------------------------------------------------
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main_menu, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        // TODO: Implement menu options; not required
        return super.onOptionsItemSelected(item);
    }

    //----------------------------------------------------------------
    // Displaying seek bar input in a text box
    //----------------------------------------------------------------
    @Override
    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
        // Calculating and showing seek bar input
        distance = seekBar.getProgress() + 1;
        edtTxtDistance.setText(distance+" mi");

        // Calculating and showing delivery fee
        deliveryFee = (distance <= 10) ? 3.00d : 5.00d;
        edtTxtDeliveryFee.setText(String.format("$%.2f", deliveryFee));

        // Calculating and showing ETA
        eta = (distance * MINUTES_PER_MILE);
        edtTxtETA.setText(eta + " minutes");

        updateTotal();
    }

    //----------------------------------------------------------------
    // Auto-generated/unused abstract methods
    //----------------------------------------------------------------
    @Override
    public void onStartTrackingTouch(SeekBar seekBar) {}
    @Override
    public void onStopTrackingTouch(SeekBar seekBar) {}

    //----------------------------------------------------------------
    // Auto-generated/unused abstract methods
    //----------------------------------------------------------------
    @Override
    public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {}
    @Override
    public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {}

    //----------------------------------------------------------------
    // Method used for preventing more than 2 decimal places in tip
    //----------------------------------------------------------------
    @Override
    public void afterTextChanged(Editable e) {
        String text = e.toString();
        if (text.contains(".") && text.substring(text.indexOf(".") + 1).length() > 2) {
            text = text.substring(0, text.length() - 1);
            edtTxtTip.setText(text);
            edtTxtTip.setSelection(edtTxtTip.getText().length());
        }

        // Converting string input into double
        if (!text.isEmpty() && !text.equals(".")) {
            tip = Double.parseDouble(text);
        } else {
            tip = 0.00d;
        }
        updateTotal();
    }

    //----------------------------------------------------------------
    // Updating the total based on changes made
    //----------------------------------------------------------------
    private void updateTotal() {
        total = subtotal + salesTax + deliveryFee + tip;
        edtTxtTotal.setText(String.format("$%.2f", total));
    }

    //----------------------------------------------------------------
    // Loading saved inputs when recall button in clicked
    //----------------------------------------------------------------
    public void onClickRecall(View view) {
        // Getting confirmation for recall
        AlertDialog.Builder dialog = new AlertDialog.Builder(this)
                .setTitle("Confirm Recall")
                .setMessage("Are you sure you want to retrieve the last delivery?")
                .setNegativeButton("No", null)
                .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        loadPreferences();
                    }
                });
        dialog.show();
    }

    //----------------------------------------------------------------
    // Resetting inputs to original state when reset button is clicked
    // Subtotal, sales tax, and total are not cleared as they are
    //      dependent on inputs of the previous activity.
    //----------------------------------------------------------------
    public void onClickReset(View view) {
        // Getting confirmation for reset
        AlertDialog.Builder dialog = new AlertDialog.Builder(this);
        dialog.setTitle("Confirm Reset")
                .setMessage("Are you sure you want to reset?")
                .setNegativeButton("No", null)
                .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        edtTxtName.setText("");
                        edtTxtAddress.setText("");
                        edtTxtPhone.setText("");

                        seekBarDistance.setProgress(0);

                        edtTxtDistance.setText("");
                        edtTxtDeliveryFee.setText("");
                        edtTxtTip.setText("");
                        edtTxtETA.setText("");
                    }
                })
                .show();
    }

    //----------------------------------------------------------------
    // Displaying full order details when submit button is clicked
    // Inputs are saved into Shared Preferences.
    //----------------------------------------------------------------
    public void onClickSubmit(View view) {
        name = edtTxtName.getText().toString();
        address = edtTxtAddress.getText().toString();
        phone = edtTxtPhone.getText().toString();

        savePreferences();

        // Dialog box with order info
        AlertDialog.Builder dialog = new AlertDialog.Builder(this);
        dialog.setPositiveButton("Ok", null)
                .setTitle("Oder Details")
                .setMessage(
                        "Name: " + name
                        + "\nAddress: " + address
                        + "\nPhone: " + phone
                        + "\nSelections: "
                        + "\n\t\t\tEntree: " + itemsSelected[0]
                        + "\n\t\t\tDrink: " + itemsSelected[1]
                        + "\n\t\t\tDessert: " + itemsSelected[2]
                        + "\nSubtotal: " + String.format("$%.2f", subtotal)
                        + "\nSales Tax (6%): " + String.format("$%.2f", salesTax)
                        + "\nDistance: " + distance + " miles"
                        + "\nDelivery Fee: " + String.format("$%.2f",deliveryFee)
                        + "\nTip: " + String.format("$%.2f", tip)
                        + "\nTotal: " + String.format("$%.2f", total)
                        + "\n\nETA: " + eta + " minutes"
                )
                .show();
    }

    //----------------------------------------------------------------
    // Method to save inputs into Shared Preferences
    //----------------------------------------------------------------
    private void savePreferences() {
        SharedPreferences sp = getSharedPreferences(MY_PREFS, MODE_PRIVATE);
        SharedPreferences.Editor editor = sp.edit();

        editor.putString("name", name);
        editor.putString("address", address);
        editor.putString("phone", phone);
        editor.putString("entree", itemsSelected[0]);
        editor.putString("drink", itemsSelected[1]);
        editor.putString("dessert", itemsSelected[2]);
        editor.putString("subtotal", ""+subtotal);
        editor.putInt("distance", distance);
        editor.putString("tip", ""+tip);

        editor.apply();
    }

    //----------------------------------------------------------------
    // Retrieving saved inputs from previous order
    //----------------------------------------------------------------
    private void loadPreferences() {
        SharedPreferences sp = getSharedPreferences(MY_PREFS, MODE_PRIVATE);

        name = sp.getString("name", "");
        address = sp.getString("address", "");
        phone = sp.getString("phone", "");
        itemsSelected[0] = sp.getString("entree", "");
        itemsSelected[1] = sp.getString("drink", "");
        itemsSelected[2] = sp.getString("dessert", "");
        subtotal = Double.parseDouble(sp.getString("subtotal", "0.00"));
        distance = sp.getInt("distance", 0);
        tip = Double.parseDouble(sp.getString("tip", "0.00"));

        edtTxtName.setText(name);
        edtTxtAddress.setText(address);
        edtTxtPhone.setText(phone);

        seekBarDistance.setProgress(distance - 1);

        edtTxtSubtotal.setText(String.format("$%.2f", subtotal));
        salesTax = subtotal * SALES_TAX_RATE;
        edtTxtSalesTax.setText(String.format("$%.2f",salesTax));
        edtTxtTip.setText(String.format("%.2f", tip));

        updateTotal();
    }
}
